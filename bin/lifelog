#!/usr/bin/env ruby
require 'optparse'
require 'rubygems'
require 'ramaze'
require 'controller/init.rb'

module LifeLog
  include Innate::Optioned
  VERSION = File.read(__DIR__("../VERSION"))

  options.dsl do
    o "Path of config file", 
      :config, File.expand_path("~/.lifelog.rb") 
    o "Path of database file",
      :db, File.expand_path("~/.lifelog.db")
    o "Port number", 
      :port, 7012
    o "Whether to skip creating table :posts",
      :no_create_post_table, false
  end

  def self.parse_argv!
    OptionParser.new{|o|
      o.on("--config PATH"){|path|
        LifeLog.options[:config] = path
      }
      o.on("--db DB_PATH"){|path| 
        LifeLog.options[:db] = File.expand_path(path, Dir.pwd)
      }
      o.on("--from-001"){
        LifeLog.options[:no_create_post_table] = true
      }
      o.on("--port N"){|port|
        LifeLog.options[:port] = port
      }
      o.on("--version"){ puts VERSION; exit }
      o.on("--help"){ puts o.to_s; exit }
    }.parse!(ARGV)
  end

  def self.load_conf(conf)
    if File.exist?(conf)
      Ramaze::Log.info("Loading config file: #{conf}")
      require conf
    else
      Ramaze::Log.warn("Config file not found: #{conf}")
    end
  end

  def self.load_models(db)
    Ramaze::Log.info("Loading database: #{db}")
    require __DIR__('../model/init.rb')
  end

  def self.start(port)
    Ramaze::Log.info("Starting server with port #{port}")
    Ramaze.start :port => port,
                 :root => __DIR__('../')
  end
end

LifeLog.parse_argv!

LifeLog.load_conf(LifeLog.options[:config])
LifeLog.load_models(LifeLog.options[:db])
LifeLog.start(LifeLog.options[:port])
